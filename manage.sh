#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
send_telegram() {
    local message="$1"
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST \
            -H 'Content-Type: application/json' \
            -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$message\", \"parse_mode\": \"HTML\"}" \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" > /dev/null
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ Telegram
send_config_to_telegram() {
    if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
        print_error "üö´ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        return 1
    fi

    print_info "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ Telegram..."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    local config_message="üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config_message+="<b>üåê –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    config_message+="–î–æ–º–µ–Ω:–ø–æ—Ä—Ç <code>${DOMAIN:-localhost}:${HTTP_PORT:-8080}</code>\n"
    config_message+="SSL: <b>${SSL_ENABLED:-–Ω–µ—Ç}</b>\n"
    config_message+="–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: <b>${AUTOSTART_ENABLED:-–Ω–µ—Ç}</b>\n\n"
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL
    config_message+="<b>üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL:</b>\n"
    config_message+="–•–æ—Å—Ç: mysql (–≤–Ω—É—Ç—Ä–∏ Docker)\n"
    config_message+="–ü–æ—Ä—Ç: 3306 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)\n"
    config_message+="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: <code>${MYSQL_DATABASE:-app_db}</code>\n"
    config_message+="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${MYSQL_USER:-app_user}</code>\n"
    config_message+="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>${MYSQL_PASSWORD:-–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω}</code>\n"
    config_message+="Root –ø–∞—Ä–æ–ª—å: <code>${MYSQL_ROOT_PASSWORD:-–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω}</code>\n\n"
    
    # –î–æ—Å—Ç—É–ø –∫ MySQL
    if [ "$MYSQL_EXPOSED" = "y" ]; then
        config_message+="<b>üîì –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ MySQL:</b>\n"
        config_message+="–•–æ—Å—Ç: <code>${VPS_IP:-–≤–∞—à_IP}</code>\n"
    else
        config_message+="<b>üîí MySQL –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Docker</b>\n\n"
    fi
    
    # Xdebug
    if [ "$XDEBUG_ENABLED" = "y" ]; then
        config_message+="<b>üêõ Xdebug:</b>\n"
        config_message+="–•–æ—Å—Ç: <code>${XDEBUG_HOST}</code>\n"
        config_message+="–ü–æ—Ä—Ç: <code>${XDEBUG_PORT:-9003}</code>\n"
        config_message+="IDE Key: <code>${XDEBUG_IDEKEY:-PHPSTORM}</code>\n\n"
    else
        config_message+="<b>üêõ Xdebug: –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
    fi
    
    # Telegram Bot API
    if [ "$TELEGRAM_API_ENABLED" = "y" ]; then
        config_message+="<b>ü§ñ Telegram Bot API:</b>\n"
        config_message+="API ID: <code>${TELEGRAM_API_ID}</code>\n"
        config_message+="API HASH: <code>secret</code>\n"
        config_message+="Stat –ø–æ—Ä—Ç: <code>${TELEGRAM_STAT_PORT:-8082} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)</code>\n"
        config_message+="HTTP –ø–æ—Ä—Ç: <code>${TELEGRAM_HTTP_PORT:-8081} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)</code>\n\n"
    else
        config_message+="<b>ü§ñ Telegram Bot API: –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
    fi
    
    # GitHub
    if [ -n "$GITHUB_REPO" ]; then
        config_message+="<b>üì• GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b>\n"
        config_message+="<code>${GITHUB_REPO}</code>\n\n"
    else
        config_message+="<b>üì• GitHub: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</b>\n\n"
    fi
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if send_telegram "$config_message"; then
        print_success "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"
        

    else
        print_error "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ Telegram"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º
manage_autostart() {
    local action="$1"
    
    case "$action" in
        "enable")
            print_info "üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
            if [ -f /etc/systemd/system/docker-compose-app.service ]; then
                sudo systemctl enable docker-compose-app.service
                sudo systemctl start docker-compose-app.service
                print_success "üéØ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º .env
                if [ -f .env ]; then
                    grep -v "AUTOSTART_ENABLED" .env > .env.tmp
                    echo "AUTOSTART_ENABLED=true" >> .env.tmp
                    mv .env.tmp .env
                fi
            else
                print_error "üö´ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.sh –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            fi
            ;;
        "disable")
            print_info "üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
            if systemctl is-enabled docker-compose-app.service 2>/dev/null | grep -q enabled; then
                sudo systemctl disable docker-compose-app.service
                sudo systemctl stop docker-compose-app.service
                print_success "üéØ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º .env
                if [ -f .env ]; then
                    grep -v "AUTOSTART_ENABLED" .env > .env.tmp
                    echo "AUTOSTART_ENABLED=false" >> .env.tmp
                    mv .env.tmp .env
                fi
            else
                print_info "‚ÑπÔ∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω"
            fi
            ;;
        "status")
            print_info "üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:"
            if systemctl is-enabled docker-compose-app.service 2>/dev/null | grep -q enabled; then
                print_success "üéØ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: –í–ö–õ–Æ–ß–ï–ù"
                echo "   üìù –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã"
            else
                print_warning "üö´ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: –û–¢–ö–õ–Æ–ß–ï–ù"
                echo "   üìù –°–µ—Ä–≤–∏—Å –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            fi
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            if systemctl is-active docker-compose-app.service 2>/dev/null | grep -q active; then
                print_success "üü¢ –°–µ—Ä–≤–∏—Å: –ó–ê–ü–£–©–ï–ù"
            else
                print_warning "üü° –°–µ—Ä–≤–∏—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù"
            fi
            ;;
        "restart")
            print_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
            if systemctl is-enabled docker-compose-app.service 2>/dev/null | grep -q enabled; then
                sudo systemctl restart docker-compose-app.service
                print_success "‚úÖ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
            else
                print_error "üö´ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
            fi
            ;;
        *)
            print_error "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 autostart {enable|disable|status|restart}"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSL
manage_ssl() {
    local action="$1"
    
    case "$action" in
        "renew")
            print_info "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
            if sudo certbot renew; then
                print_success "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
                sudo systemctl reload nginx
            else
                print_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
            fi
            ;;
        "status")
            print_info "üìä –°—Ç–∞—Ç—É—Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:"
            if [ -n "$SSL_DOMAIN" ] && [ -f "/etc/letsencrypt/live/$SSL_DOMAIN/fullchain.pem" ]; then
                print_success "üîê SSL: –ê–ö–¢–ò–í–ï–ù"
                echo "   üåê –î–æ–º–µ–Ω: $SSL_DOMAIN"
                echo "   üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:"
                sudo certbot certificates | grep "Expiry" | head -1
            else
                print_warning "üö´ SSL: –ù–ï –ê–ö–¢–ò–í–ï–ù"
            fi
            ;;
        "test")
            if [ -n "$SSL_DOMAIN" ]; then
                print_info "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –¥–ª—è $SSL_DOMAIN..."
                if curl -I "https://$SSL_DOMAIN" > /dev/null 2>&1; then
                    print_success "‚úÖ SSL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                else
                    print_error "‚ùå –û—à–∏–±–∫–∞ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
                fi
            else
                print_error "üö´ SSL –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            fi
            ;;
        *)
            print_error "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 ssl {renew|status|test}"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Bot API
manage_telegram() {
    local action="$1"
    
    if [ "$TELEGRAM_API_ENABLED" != "y" ]; then
        print_error "üö´ Telegram Bot API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        exit 1
    fi
    
    case "$action" in
        "stats")
            print_info "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram Bot API..."
            if curl -s "http://localhost:$TELEGRAM_HTTP_PORT" > /dev/null 2>&1; then
                print_success "ü§ñ Telegram Bot API –¥–æ—Å—Ç—É–ø–µ–Ω"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats=$(docker-compose exec -T telegram-api curl -s "http://localhost:$TELEGRAM_STAT_PORT")
                if [ -n "$stats" ]; then
                    echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram Bot API:"
                    echo "$stats"
                else
                    print_warning "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
                fi
            else
                print_error "‚ùå Telegram Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
            ;;
        "logs")
            print_info "üìã –õ–æ–≥–∏ Telegram Bot API:"
            docker-compose logs telegram-api --tail=50
            ;;
        "restart")
            print_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram Bot API..."
            docker-compose restart telegram-api
            print_success "‚úÖ Telegram Bot API –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
            ;;
        "status")
            print_info "üìä –°—Ç–∞—Ç—É—Å Telegram Bot API:"
            if docker-compose ps telegram-api | grep -q "Up"; then
                print_success "ü§ñ Telegram Bot API: –ó–ê–ü–£–©–ï–ù"
                echo "   üîå Stat –ø–æ—Ä—Ç: $TELEGRAM_STAT_PORT (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)"
                echo "   üåê HTTP –ø–æ—Ä—Ç: $TELEGRAM_HTTP_PORT (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)"
                echo "   üìÅ –§–∞–π–ª—ã TDLib: ./tdlib/"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                if curl -s "http://localhost:$TELEGRAM_HTTP_PORT" > /dev/null 2>&1; then
                    print_success "   üü¢ API –¥–æ—Å—Ç—É–ø–µ–Ω"
                else
                    print_warning "   üü° API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                fi
            else
                print_error "‚ùå Telegram Bot API: –û–°–¢–ê–ù–û–í–õ–ï–ù"
            fi
            ;;
        "files")
            print_info "üìÅ –§–∞–π–ª—ã TDLib:"
            if [ -d "./tdlib" ]; then
                ls -la ./tdlib/
                echo ""
                echo "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(du -sh ./tdlib/ | cut -f1)"
            else
                print_warning "‚ö†Ô∏è –ü–∞–ø–∫–∞ tdlib –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            fi
            ;;
        *)
            print_error "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 telegram {stats|logs|restart|status|files}"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ Docker
rebuild_docker() {
    local service="$1"
    
    print_info "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if [ -n "$service" ]; then
        # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        print_info "üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"
        if docker-compose build --no-cache "$service"; then
            print_success "‚úÖ –°–µ—Ä–≤–∏—Å $service –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"
            print_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
            docker-compose up -d --force-recreate "$service"
            print_success "‚úÖ –°–µ—Ä–≤–∏—Å $service –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        else
            print_error "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ $service"
            exit 1
        fi
    else
        # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        print_info "üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        if docker-compose build --no-cache; then
            print_success "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã"
            print_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
            docker-compose up -d --force-recreate
            print_success "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        else
            print_error "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
            exit 1
        fi
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
    echo ""
    print_info "üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏:"
    docker-compose ps
}

case "$1" in
    "start")
        docker-compose up -d
        print_success "üöÄ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
        ;;
    "stop")
        docker-compose down
        print_success "üõë –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        ;;
    "restart")
        docker-compose restart
        print_success "üîÉ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        ;;
    "logs")
        if [ -n "$2" ]; then
            docker-compose logs "$2" -f
        else
            docker-compose logs -f
        fi
        ;;
    "build")
        rebuild_docker "$2"
        ;;
    "rebuild")
        rebuild_docker "$2"
        ;;
    "status")
        print_info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        docker-compose ps
        ;;
    "ssh-php")
        docker-compose exec php bash
        ;;
    "ssh-mysql")
        docker-compose exec mysql bash
        ;;
    "ssh-nginx")
        docker-compose exec nginx sh
        ;;
    "ssh-telegram")
        if [ "$TELEGRAM_API_ENABLED" = "y" ]; then
            docker-compose exec telegram-api sh
        else
            print_error "üö´ Telegram Bot API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        fi
        ;;
    "mysql")
        if [ -n "$MYSQL_ROOT_PASSWORD" ]; then
            docker-compose exec mysql mysql -u root -p"$MYSQL_ROOT_PASSWORD"
        else
            docker-compose exec mysql mysql -u root
        fi
        ;;
    "info")
        echo -e "${BLUE}üìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
        echo "   üåê HTTP –ø–æ—Ä—Ç: ${HTTP_PORT:-8080}"
        echo "   üè† –î–æ–º–µ–Ω: ${DOMAIN:-localhost}"
        echo "   üîê SSL: ${SSL_ENABLED:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ}"
        echo "   üóÉÔ∏è MySQL Database: ${MYSQL_DATABASE:-app_db}"
        echo "   üë§ MySQL User: ${MYSQL_USER:-app_user}"
        echo "   üîì MySQL Exposed: ${MYSQL_EXPOSED:-no}"
        echo "   üêõ Xdebug: ${XDEBUG_ENABLED:-no}"
        if [ "${XDEBUG_ENABLED}" = "y" ]; then
            echo "   üìç Xdebug Host: ${XDEBUG_HOST}"
            echo "   üîå Xdebug Port: ${XDEBUG_PORT}"
        fi
        echo "   ü§ñ Telegram API: ${TELEGRAM_API_ENABLED:-no}"
        if [ "${TELEGRAM_API_ENABLED}" = "y" ]; then
            echo "   üìä Telegram Stat Port: ${TELEGRAM_STAT_PORT}"
            echo "   üåê Telegram HTTP Port: ${TELEGRAM_HTTP_PORT}"
        fi
        if [ -n "${GITHUB_REPO}" ]; then
            echo "   üì• GitHub Repo: ${GITHUB_REPO}"
        fi
        echo "   üîß –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: ${AUTOSTART_ENABLED:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ}"
        ;;
    "ports")
        print_info "üîì –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:"
        netstat -tulpn | grep LISTEN | grep -E ":(80|443|${HTTP_PORT:-8080})" || echo "   üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
        ;;
    "telegram-test")
        if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            send_telegram "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
            print_success "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        else
            print_error "üö´ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        fi
        ;;
    "autostart")
        manage_autostart "$2"
        ;;
    "ssl")
        manage_ssl "$2"
        ;;
    "telegram")
        manage_telegram "$2"
        ;;
    "nginx")
        print_info "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Nginx..."
        sudo systemctl reload nginx
        print_success "‚úÖ Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
        ;;
    "update")
        print_info "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ GitHub..."
        if [ -n "$GITHUB_REPO" ]; then
            cd wwwdata && git pull && cd ..
            print_success "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
        else
            print_error "üö´ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        fi
        ;;
    "send-config")
        send_config_to_telegram
        ;;
    *)
        echo -e "${BLUE}üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {–∫–æ–º–∞–Ω–¥–∞}${NC}"
        echo ""
        echo "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
        echo "  $0 start                    üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  $0 stop                     üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  $0 restart                  üîÉ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  $0 rebuild [—Å–µ—Ä–≤–∏—Å]         üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ docker-compose.yml)"
        echo "  $0 build [—Å–µ—Ä–≤–∏—Å]           üî® –ê–ª–∏–∞—Å –¥–ª—è rebuild"
        echo "  $0 logs [—Å–µ—Ä–≤–∏—Å]            üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å -f)"
        echo "  $0 status                   üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo ""
        echo "üõ†Ô∏è –°–µ—Ä–≤–∏—Å—ã:"
        echo "  $0 ssh-php                  üíª –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PHP"
        echo "  $0 ssh-mysql                üóÉÔ∏è –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä MySQL"
        echo "  $0 ssh-nginx                üåê –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Nginx"
        echo "  $0 ssh-telegram             ü§ñ –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Telegram API"
        echo "  $0 mysql                    üìä –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL"
        echo "  $0 nginx                    üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Å—Ç–æ–≤–æ–π Nginx"
        echo ""
        echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
        echo "  $0 info                     ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo "  $0 ports                    üîì –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã"
        echo "  $0 telegram-test           üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"
        echo "  $0 send-config              üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ Telegram"
        echo ""
        echo "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        echo "  $0 autostart enable         üîß –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ"
        echo "  $0 autostart disable        üîß –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"
        echo "  $0 autostart status         üîß –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"
        echo "  $0 ssl renew                üîê –û–±–Ω–æ–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
        echo "  $0 ssl status               üîê –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å SSL"
        echo "  $0 telegram stats           üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram Bot API"
        echo "  $0 telegram logs            üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Telegram Bot API"
        echo "  $0 telegram status          üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Telegram Bot API"
        echo "  $0 telegram restart         üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram Bot API"
        echo "  $0 telegram files           üìÅ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã TDLib"
        echo "  $0 update                   üì• –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ GitHub (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
        exit 1
esac
